!obj:pylearn2.train.Train {
    dataset: &train !obj:datasets.food100.FOOD100 {
        which_set: 'train',
        input_size: %(input_size)i,
        axes: %(axes)s,
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: %(batch_size)i,
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [%(input_size)i, %(input_size)i],
            num_channels: 3, 
        },
        layers: [ 
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'h0',
                     pad: %(pad_h0)i,
                     tied_b: 1,
                     num_channels: %(num_channels_h0)i,
                     num_pieces: %(num_pieces_conv)i,
                     irange: %(irange)f,
                     max_kernel_norm: %(max_norm)f,
                     kernel_shape: [%(kernel_side_h0)i, %(kernel_side_h0)i],
                     pool_shape: [%(pool_side_conv)i, %(pool_side_conv)i],
                     pool_stride: [%(pool_stride_conv)i, %(pool_stride_conv)i],
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'h1',
                     pad: %(pad_conv)i,
                     tied_b: 1,
                     num_channels: %(num_channels_h1)i,
                     num_pieces: %(num_pieces_conv)i,
                     irange: %(irange)f,
                     max_kernel_norm: %(max_norm)f,
                     kernel_shape: [%(kernel_side_conv)i, %(kernel_side_conv)i],
                     pool_shape: [%(pool_side_conv)i, %(pool_side_conv)i],
                     pool_stride: [%(pool_stride_conv)i, %(pool_stride_conv)i],
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'h2',
                     pad: %(pad_conv)i,
                     tied_b: 1,
                     num_channels: %(num_channels_h2)i,
                     num_pieces: %(num_pieces_conv)i,
                     irange: %(irange)f,
                     max_kernel_norm: %(max_norm)f,
                     kernel_shape: [%(kernel_side_conv)i, %(kernel_side_conv)i],
                     pool_shape: [%(pool_side_conv)i, %(pool_side_conv)i],
                     pool_stride: [%(pool_stride_conv)i, %(pool_stride_conv)i],
                 },
                 !obj:pylearn2.models.maxout.Maxout {
                     layer_name: 'h3',
                     max_col_norm: %(max_norm)f,
                     num_units: %(num_units_h3)i,
                     num_pieces: %(num_pieces_maxout)i,
                     irange: %(irange)f,
                 },
                 !obj:pylearn2.models.mlp.Softmax {
                     layer_name: 'y',
                     max_col_norm: %(max_norm)f,
                     n_classes: %(nb_classes)i,
                     irange: %(irange)f,
                 },
        ],
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: %(batch_size)i,
        learning_rate: %(learning_rate)f,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: %(init_momentum)f,
        },
        train_iteration_mode: even_shuffled_sequential,
        monitor_iteration_mode: even_shuffled_sequential,
        monitoring_dataset: {
            'train': *train,
            'valid': !obj:datasets.food100.FOOD100 {
                which_set: 'valid',
                input_size: %(input_size)i,
                axes: %(axes)s
            },
            'test': !obj:datasets.food100.FOOD100 {
                which_set: 'test',
                input_size: %(input_size)i,
                axes: %(axes)s
            },
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: 'valid_y_misclass',
            prop_decrease: 0.0,
            N: 20
        },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: { 'h0' : .8 },
            input_scales: { 'h0' : 1. }
        },
    },
    extensions: [ 
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: '%(save_path_best)s'
        },
        !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 50,
            final_momentum: %(final_momentum)f,
        },
        !obj:pylearn2.training_algorithms.sgd.LinearDecayOverEpoch {
            start: 1,
            saturate: 50,
            decay_factor: %(lr_decay_factor)f
        }
    ],
    save_path: '%(save_path)s',
    save_freq: 1
}
